import{A as t,d as s,N as r,E as e,e as i,f as n,g as o,R as a,h,j as u,k as m}from"./p-d7e83d64.js";import{d as c}from"./p-f67a156d.js";import{l as f,f as g}from"./p-4b404e74.js";import{i as p}from"./p-7e1544ef.js";
/**
 * @license
 * Copyright (c) Peculiar Ventures, LLC.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */class l extends t{constructor(t){super(s(t),f),this.thumbprints={};const{tbsCertificate:e}=this.asn;this.serialNumber=p.Convert.ToHex(e.serialNumber),this.subject=new r(e.subject).toJSON(),this.issuer=new r(e.issuer).toJSON(),this.version=e.version+1;const i=e.validity.notBefore.utcTime||e.validity.notBefore.generalTime;if(!i)throw new Error("Cannot get 'notBefore' value");this.notBefore=i;const n=e.validity.notAfter.utcTime||e.validity.notAfter.generalTime;if(!n)throw new Error("Cannot get 'notAfter' value");this.notAfter=n,this.validity=c(this.notBefore,this.notAfter)}parseExtensions(){const{tbsCertificate:t}=this.asn;t.extensions&&(this.extensions=t.extensions.map(t=>new e(g.serialize(t))))}get publicKey(){const{subjectPublicKey:t,algorithm:s}=this.asn.tbsCertificate.subjectPublicKeyInfo;let r;return s.algorithm===i&&s.parameters&&(r=g.parse(s.parameters,n)),s.algorithm===o&&(r=g.parse(t,a)),{params:r,value:g.serialize(this.asn.tbsCertificate.subjectPublicKeyInfo),algorithm:s.algorithm}}get signature(){const{signatureValue:t,signatureAlgorithm:s}=this.asn;return{value:t,algorithm:s.algorithm}}exportAsBase64(){return p.Convert.ToBase64(this.raw)}exportAsHexFormatted(){return h(p.Convert.ToHex(this.raw))}exportAsPemFormatted(){return`-----BEGIN CERTIFICATE-----\n${u(this.exportAsBase64())}\n-----END CERTIFICATE-----`}async getThumbprint(t="SHA-1"){try{const s=await m(t,this.raw);this.thumbprints[t.name||t]=p.Convert.ToHex(s)}catch(s){console.error("Error thumbprint get:",s)}}get commonName(){if(!this.subject)return"";for(let t=0;t<this.subject.length;t+=1){const s=this.subject[t];if("CN"===s.shortName||"E"===s.shortName||"O"===s.shortName)return s.value}return""}get issuerCommonName(){if(!this.issuer)return"";for(let t=0;t<this.issuer.length;t+=1){const s=this.issuer[t];if("CN"===s.shortName)return s.value;if("E"===s.shortName)return s.value}return""}get isRoot(){return JSON.stringify(this.issuer)===JSON.stringify(this.subject)}subjectToString(){return this.subject?this.subject.map(t=>`${t.shortName}=${t.value}`).join(", "):""}issuerToString(){return this.issuer?this.issuer.map(t=>`${t.shortName}=${t.value}`).join(", "):""}}export{l as X}